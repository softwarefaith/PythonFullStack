"""
=====生成器

通过列表生成式，我们可以直接创建一个列表。
但是，受到内存限制，列表容量肯定是有限的。
而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，
如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？
这样就不必创建完整的list，从而节省大量的空间。
在Python中，这种一边循环一边计算的机制，称为生成器：generator。


"""

L = [x * x for x in range(10)]   # list

# 一个列表生成式的[]改成()，就创建了一个generator

g = (x * x for x in range(10))

"""
====访问

generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值
直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。

当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环
因为generator也是可迭代对象

"""

# 一个函数定义中包含yield关键字，那么这个函数变为generator

"""
===理解执行流程
函数是顺序执行，遇到return语句或者最后一行函数语句就返回。
而变成generator的函数，
在每次调用next()的时候执行，遇到yield语句返回，
再次执行时从上次返回的yield语句处继续执行。

yield实现在单线程的情况下实现并发运算的效果

"""

"""
generator是非常强大的工具
在Python中，可以简单地把列表生成式改成generator，也可以通过函数实现复杂逻辑的generator。

generator的工作原理:
在for循环的过程中不断计算出下一个元素，
并在适当的条件结束for循环。

对于函数改成的generator来说，
遇到return语句或者执行到函数体最后一行语句，
就是结束generator的指令，for循环随之结束。

注意区分普通函数和generator函数，普通函数调用直接返回结果
generator函数的“调用”实际返回一个generator对象：<generator ******>




"""

